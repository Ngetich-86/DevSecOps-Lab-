version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskmanager-db
    environment:
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpassword
      POSTGRES_DB: taskdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d taskdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Cache/Queue
  redis:
    image: redis:7-alpine
    container_name: taskmanager-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - app-network

  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskmanager-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://taskuser:taskpassword@postgres:5432/taskdb
      REDIS_URL: redis://redis:6379
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./node_modules/.bin/tsx", "src/index.ts"]
    healthcheck:
      test: ["CMD", "./node_modules/.bin/tsx", "healthcheck.ts"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    restart: unless-stopped

  # Optional: PGAdmin for database management (dev only)
  pgadmin:
    image: dpage/pgadmin4
    container_name: taskmanager-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@taskmanager.com
      PGADMIN_DEFAULT_PASSWORD: adminpassword
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # Grafana (observability)
  grafana:
    image: grafana/grafana:10.4.6
    container_name: taskmanager-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:

networks:
  app-network:
    driver: bridge